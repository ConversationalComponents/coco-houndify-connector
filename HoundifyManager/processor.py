import requests
import logging
import hashlib
import base64
import hmac
import time
import json
import uuid
import os


HOUNDIFY_BASE_TEXT_API = "https://api.houndify.com/v1/text"
COMPONENTS_FOLDER_NAME = "components"


def _build_client_config_path(component_id):
    """
    Build service account json file full path.

    Arguments:
        component_id (string): Target Houndify component ID, client config file
        path.

    Returns:
        Client config file path (string)
    """
    components_folder_name = os.path.join(os.path.dirname(os.path.abspath(__file__)), COMPONENTS_FOLDER_NAME)
    return f"{components_folder_name}/{component_id}.json"


def load_component_config(component_id):
    """
    Fetch service account json content.

    Arguments:
        component_id (string): Target Houndify component ID, client config file
        path.

    Returns:
         Client config file json content. (dict)
    """

    config_file_path = _build_client_config_path(component_id)

    if not os.path.isfile(config_file_path):
        error_message = f"Component with ID: {component_id} does not exist."
        logging.error(error_message)
        raise Exception(error_message)

    with open(config_file_path, "rb") as f:
        return json.loads(f.read())


def _build_request_headers(client_id, client_key, session_id, request_id):
    """
    Arguments:
        client_id (string): Obtained when you register a client.
        client_key (string): Obtained when you register a client.
        request_id (string): A UUID generated by the client on a per request basis.
        session_id (string): Unique session for context user.
    Returns:

    """

    timestamp = str(int(time.time()))

    hound_request_auth = session_id + ";" + request_id

    h = hmac.new(bytearray(base64.urlsafe_b64decode(client_key)),
                 (hound_request_auth + timestamp).encode("utf-8"),
                 hashlib.sha256)

    signature = base64.urlsafe_b64encode(h.digest()).decode("utf-8")

    hound_client_auth = client_id + ";" + timestamp + ";" + signature

    headers = {
        "Hound-Request-Authentication": hound_request_auth,
        "Hound-Client-Authentication": hound_client_auth
    }

    return headers


def process_request(component_id, session_id, text, language_code="en"):
    """
    Returns bot output for user input.

    Using the same `session_id` between requests allows continuation
    of the conversation.

    Arguments:
        component_id (string): Target Houndify component ID, client config file
        path.
        session_id (string): Unique session for context user.
        text (string): User input.
        language_code (string): Context language.
    Returns:
        Houndify JSON response. (dict)
    """
    client_config = load_component_config(component_id)

    client_id = client_config["client_id"]
    client_key = client_config["client_key"]
    request_id = str(uuid.uuid4())

    request_headers = _build_request_headers(client_id=client_id,
                                             client_key=client_key,
                                             session_id=session_id,
                                             request_id=request_id)

    request_params = {"query": text}

    response = requests.post(HOUNDIFY_BASE_TEXT_API, headers=request_headers,
                             params=request_params)

    response.raise_for_status()

    return response.json()
